@page "/restaurant"
@model IndexModel
@{
    ViewData["Title"] = "Restaurant";
}

<div class="absolute top-16 right-4">
    <a href="/restaurant/schema" class="text-indigo-600">schema.ts</a>
    <a href="/restaurant/prompt?userMessage=i+want+two+large+pizzas+with+olives+and+mushrooms" class="ml-4 text-indigo-600">prompt</a>
    <a href="https://github.com/NetCoreApps/RestaurantTypeChat" class="ml-4 text-indigo-600">github</a>
</div>

<div class="container mx-auto px-5">
    <section class="flex-col md:flex-row flex items-center md:justify-between mt-16 mb-16 md:mb-12">
        <div class="flex">
            <a href="/restaurant">
                <svg class="w-28 h-28 mr-6" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                    <path fill="none" stroke="currentColor" stroke-width="2"
                          d="M19 18H5h14Zm-7 0v-6v6Zm3 0v-4v4Zm-6 0v-4v4Zm10 4V11.33a3.001 3.001 0 1 0-2.08-5.63C16.55 3.874 14.46 2 12 2S7.45 3.874 7.08 5.7A3 3 0 1 0 5 11.33V22h14Z"/>
                </svg>
            </a>
            <h1 class="text-6xl md:text-8xl font-bold tracking-tighter leading-tight md:pr-8">Restaurant TypeChat</h1>
        </div>
    </section>
</div>

<div id="app" v-cloak class="container mx-auto px-5">
    <div>
        <div class="mx-auto max-w-screen-sm flex flex-wrap sm:flex-nowrap items-center justify-center sm:justify-end">
            <div class="mb-8 lg:mb-0 w-full lg:w-auto">
                <form v-if="!(loadingRecording || isRecording || isTranscribing || transcript)" v-on:submit.prevent="onSubmit">
                    <text-input v-model="txtInput" :disabled="isSendingChat" class="w-full lg:w-96 text-2xl" placeholder="What can we get for you today?"></text-input>
                    <input-examples :loading="isSendingChat" v-model="txtInput" v-on:change="onSubmit" class="mt-2">
                        <pre>
                        I'd like two large, one with pepperoni and the other with extra sauce.  The pepperoni gets basil and the extra sauce gets Canadian bacon.  And add a whole salad. Make the Canadian bacon a medium. Make the salad a Greek with no red onions.  And give me two Mack and Jacks and a Sierra Nevada.  Oh, and add another salad with no red onions.
                        I'd like two large with olives and mushrooms.  And the first one gets extra sauce.  The second one gets basil.  Both get arugula.  And add a Pale Ale. Give me a two Greeks with no red onions, a half and a whole.  And a large with sausage and mushrooms.  Plus three Pale Ales and a Mack and Jacks.
                        I'll take two large with pepperoni.  Put olives on one of them. Make the olive a small.  And give me whole Greek plus a Pale Ale and an M&J.
                        I want three pizzas, one with mushrooms and the other two with sausage.  Make one sausage a small.  And give me a whole Greek and a Pale Ale.  And give me a Mack and Jacks.
                        I would like to order one with basil and one with extra sauce.  Throw in a salad and an ale.
                        I would love to have a pepperoni with extra sauce, basil and arugula. Lovely weather we're having. Throw in some pineapple.  And give me a whole Greek and a Pale Ale.  Boy, those Mariners are doggin it. And how about a Mack and Jacks.
                        I'll have two pepperoni, the first with extra sauce and the second with basil.  Add pineapple to the first and add olives to the second.
                        I sure am hungry for a pizza with pepperoni and a salad with no croutons.  And I'm thirsty for 3 Pale Ales
                        give me three regular salads and two Greeks and make the regular ones with no red onions
                        I'll take four large pepperoni pizzas.  Put extra sauce on two of them.  plus an M&J and a Pale Ale
                        I'll take a yeti, a pale ale and a large with olives and take the extra cheese off the yeti and add a Greek
                        I'll take a medium Pig with no arugula
                        I'll take a small Pig with no arugula and a Greek with croutons and no red onions
                        </pre>
                    </input-examples>
                </form>
                <div class="mt-2 text-2xl text-gray-600">
                    <div v-if="isTranscribing" class="pr-20 flex items-center">
                        <loading></loading>
                        Transcribing...
                    </div>
                    <div v-else-if="apiProcessed.response" class="text-green-600 flex">
                        <div>
                            {{apiProcessed.response}}
                        </div>
                        <svg v-on:click="clear" class="w-10 h-10 cursor-pointer hover:text-green-800 shrink-0" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21">
                            <title>clear</title>
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7.5 7.5l6 6m0-6l-6 6"/>
                        </svg>
                    </div>
                    <div v-else-if="apiProcessed.error" class="text-red-600 flex">
                        <div>
                            <div class="text-lg">
                                {{apiProcessed.error.message}}
                            </div>
                        </div>
                        <svg v-on:click="clear" class="w-10 h-10 cursor-pointer hover:text-green-800 shrink-0" xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21">
                            <title>clear</title>
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" d="m7.5 7.5l6 6m0-6l-6 6"/>
                        </svg>
                    </div>
                    <div v-else-if="transcript" class="lowercase">
                        <div class="pb-4">{{ transcript }}</div>
                    </div>
                    <div class="pr-20" v-else-if="loadingRecording">Initializing...</div>
                    <div class="pr-20" v-else-if="isListening">Listening...</div>
                    <div class="pr-20" v-else-if="isRecording">Speak Now</div>
                </div>
            </div>
            <div class="lg:ml-8">
                <record-button :loading="loadingRecording" :recording="isRecording" v-on:toggle="toggleRecording"></record-button>
                <div class="relative mr-3">
                    <close-button title="clear" v-if="apiProcessed.response || apiProcessed.error || transcript" v-on:click="clear"></close-button>
                </div>
            </div>
            <div :class="['ml-4', audio ? '' : 'invisible']">
                <play-button :playing="isPlaying" v-on:play="audio.play()" v-on:pause="audio.pause()"></play-button>
            </div>
        </div>
        <div v-if="chatResult && !isSendingChat" class="mt-8">
            <order-cart class="mx-auto max-w-screen-sm" :order="chatResult"></order-cart>
        </div>
    </div>
</div>


<script type="module">
import { mount } from "/mjs/app.mjs"
import { ref, computed, onMounted, shallowRef } from "vue"
import { ApiResult, leftPart, rightPart, appendQueryString, omit, map, humanize } from "@@servicestack/client"
import { Authenticate, CreateRecording, CreateChat } from "/mjs/dtos.mjs" 
import { AudioRecorder } from "/mjs/AudioRecorder.mjs"
import RecordButton from "/mjs/components/RecordButton.mjs"
import PlayButton from "/mjs/components/PlayButton.mjs"
import InputExamples from "/mjs/components/InputExamples.mjs"

const Mock = {
    transcribing: 0,
    sendingChat: 0,
    wait: 200,
    recording: {
        "transcript": "I'd like two large, one with pepperoni and the other with extra sauce.  The pepperoni gets basil and the extra sauce gets Canadian bacon.  And add a whole salad. Make the Canadian bacon a medium. Make the salad a Greek with no red onions.  And give me two Mack and Jacks and a Sierra Nevada.  Oh, and add another salad with no red onions.",
    },
    chat: {
        "chatResponse": '{"items":[{"itemType":"pizza","size":"large","addedToppings":["pepperoni","basil"],"quantity":1},{"itemType":"pizza","size":"medium","addedToppings":["extra sauce","canadian bacon"],"quantity":1},{"itemType":"salad","portion":"whole","style":"Greek","removedIngredients":["red onions"],"quantity":1},{"itemType":"beer","kind":"Mack and Jacks","quantity":2},{"itemType":"beer","kind":"Sierra Nevada Pale Ale","quantity":1},{"itemType":"salad","removedIngredients":["red onions"],"quantity":1}]}',
    }
}

const OrderCart = {
  template: /*html*/`
<div>   
  <h1 class="text-xl font-semibold mb-4">Shopping Cart</h1>
  <div class="overflow-hidden bg-white shadow sm:rounded-md">
    <ul role="list" class="divide-y divide-gray-200">
      <li v-for="item in order.items" :key="item.itemType" class="px-4 py-4 sm:px-6">
          <!-- Generic for all -->
          <div>
              <span class="text-lg font-semibold">{{ item.quantity ? item.quantity : 1 }}x {{ item.itemType.toUpperCase() }}</span>
          </div>

          <!-- Pizza Item -->
          <div v-if="item.itemType === 'pizza'">
              <div class="ml-4 text-gray-700">
                  <p>Size: {{ item.size ? item.size : 'large' }}</p>
                  <p v-if="item.name">{{ item.name }}</p>
                  <p v-if="item.addedToppings && item.addedToppings.length > 0">Added Toppings: {{ item.addedToppings.join(', ') }}</p>
                  <p v-if="item.removedToppings && item.removedToppings.length > 0">Removed Toppings: {{ item.removedToppings.join(', ') }}</p>
              </div>
          </div>
          
          <!-- Beer Item -->
          <div v-else-if="item.itemType === 'beer'" class="ml-4 text-gray-700">
              <p>Kind: {{ item.kind }}</p>
          </div>
          
          <!-- Salad Item -->
          <div v-else-if="item.itemType === 'salad'" class="ml-4 text-gray-700">
              <p>Portion: {{ item.portion ? item.portion : 'half' }}</p>
              <p>Style: {{ item.style ? item.style : 'Garden' }}</p>
              <p v-if="item.addedIngredients && item.addedIngredients.length > 0">Added Ingredients: {{ item.addedIngredients.join(', ') }}</p>
              <p v-if="item.removedIngredients && item.removedIngredients.length > 0">Removed Ingredients: {{ item.removedIngredients.join(', ') }}</p>
          </div>
          
          <!-- Unknown Item -->
          <div v-else-if="item.itemType === 'unknown'" class="ml-4 text-gray-700">
              <p>Text: {{ item.text }}</p>
          </div>
      </li>
    </ul>
  </div>
</div>`,
  props: ['order']
}

const App = {
    components: {
        RecordButton,
        PlayButton,
        InputExamples,
        OrderCart,
    },
    setup() {
        const txtInput = ref('')       
        const isRecording = ref(false)
        const loadingRecording = ref(false)
        const isTranscribing = ref(false)
        const isListening = ref(false)
        const isSendingChat = ref(false)
        let audioRecorder = new AudioRecorder()
        window.audioRecorder = audioRecorder
        const audio = ref()
        const isPlaying = ref(false)
        const transcript = ref('')
        const apiChat = ref(new ApiResult())
        const apiProcessed = ref(new ApiResult())
        const chatResult = ref()
        
        const feature = 'restaurant'
        const timeout = ms => new Promise(resolve => setTimeout(resolve, ms))
        
        function clear() {
            loadingRecording.value = false
            isListening.value = false
            isTranscribing.value = false
            transcript.value = ''
            apiProcessed.value = new ApiResult()
            txtInput.value = ''
            audio.value = null
            chatResult.value = null
        }
        
        async function toggleRecording() {
            if (!navigator.mediaDevices?.getUserMedia) {
                alert('getUserMedia() is not supported in your browser')
                return
            }
            
            clear()
            if (!isRecording.value) {
                audio.value = null
                loadingRecording.value = true
                await audioRecorder.start()
                loadingRecording.value = false
                isRecording.value = true
                setTimeout(() => isListening.value = true, 2000)
            } else {
                isRecording.value = false
                isTranscribing.value = true
                audio.value = await audioRecorder.stop()
                audio.value.addEventListener('playing', e => isPlaying.value = true)
                audio.value.addEventListener('pause', e => isPlaying.value = false)
                audio.value.addEventListener('ended', e => isPlaying.value = false)
                
                if (Mock.transcribing) {
                    await timeout(Mock.wait)
                    transcript.value = Mock.recording.transcript
                } else {
                    const formData = new FormData()
                    formData.append('path', audioRecorder.audioBlob, `file.${audioRecorder.audioExt}`)
                    console.time('transcribe')
                    const api = await client.apiForm(new CreateRecording({ feature }), formData)
                    if (api.succeeded) {
                        transcript.value = api.response.transcript
                    }
                    console.timeEnd('transcribe')
                }
                isTranscribing.value = false
                await processRequest(transcript.value)
            }
        }        

        async function onSubmit() {
            const request = txtInput.value
            clear()
            txtInput.value = request
            await processRequest(request)
            txtInput.value = ''
        }
        
        async function processRequest(request) {
            if (!request || !request.trim()) return
            
            isSendingChat.value = true
            if (Mock.sendingChat) {
                await timeout(Mock.wait)
                apiChat.value = new ApiResult({ response: Mock.chat })
            } else {
                console.time('gpt')
                apiChat.value = await client.api(new CreateChat({ feature, userMessage: request.toLowerCase() }))
                console.timeEnd('gpt')
            }
            transcript.value = request
            isSendingChat.value = false
            if (apiChat.value.response) {
                processChatResponse(JSON.parse(apiChat.value.response.chatResponse))
            } else if (apiChat.value.error) {
                apiProcessed.value = apiChat.value
            }
        }
        
        function processChatResponse(response) {
            console.log('processChatResponse', response)
            chatResult.value = response
        }

        return {
            txtInput,       
            isRecording,
            loadingRecording,
            isTranscribing,
            isListening,
            isSendingChat,
            audio,
            isPlaying,
            transcript,
            apiChat,
            apiProcessed,
            chatResult,
            clear,
            onSubmit,
            toggleRecording,
        }
    }
}

mount('#app', App)
</script>